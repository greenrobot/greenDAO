package de.greenrobot.daotest;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daotest.SimpleEntityDefaultValues;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SIMPLE_ENTITY_DEFAULT_VALUES.
*/
public class SimpleEntityDefaultValuesDao extends AbstractDao<SimpleEntityDefaultValues, Long> {

    public static final String TABLENAME = "SIMPLE_ENTITY_DEFAULT_VALUES";

    /**
     * Properties of entity SimpleEntityDefaultValues.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property SimpleBooleanTrue = new Property(1, Boolean.class, "simpleBooleanTrue", false, "SIMPLE_BOOLEAN_TRUE");
        public final static Property SimpleBooleanFalse = new Property(2, boolean.class, "simpleBooleanFalse", false, "SIMPLE_BOOLEAN_FALSE");
        public final static Property SimpleByteMax = new Property(3, Byte.class, "simpleByteMax", false, "SIMPLE_BYTE_MAX");
        public final static Property SimpleByteMin = new Property(4, byte.class, "simpleByteMin", false, "SIMPLE_BYTE_MIN");
        public final static Property SimpleShortMax = new Property(5, Short.class, "simpleShortMax", false, "SIMPLE_SHORT_MAX");
        public final static Property SimpleShortMin = new Property(6, short.class, "simpleShortMin", false, "SIMPLE_SHORT_MIN");
        public final static Property SimpleIntMax = new Property(7, Integer.class, "simpleIntMax", false, "SIMPLE_INT_MAX");
        public final static Property SimpleIntMin = new Property(8, int.class, "simpleIntMin", false, "SIMPLE_INT_MIN");
        public final static Property SimpleLongMax = new Property(9, Long.class, "simpleLongMax", false, "SIMPLE_LONG_MAX");
        public final static Property SimpleLongMin = new Property(10, long.class, "simpleLongMin", false, "SIMPLE_LONG_MIN");
        public final static Property SimpleFloatMax = new Property(11, Float.class, "simpleFloatMax", false, "SIMPLE_FLOAT_MAX");
        public final static Property SimpleFloatMin = new Property(12, float.class, "simpleFloatMin", false, "SIMPLE_FLOAT_MIN");
        public final static Property SimpleDoubleMax = new Property(13, Double.class, "simpleDoubleMax", false, "SIMPLE_DOUBLE_MAX");
        public final static Property SimpleDoubleMin = new Property(14, double.class, "simpleDoubleMin", false, "SIMPLE_DOUBLE_MIN");
        public final static Property SimpleString = new Property(15, String.class, "simpleString", false, "SIMPLE_STRING");
        public final static Property SimpleStringNotNull = new Property(16, String.class, "simpleStringNotNull", false, "SIMPLE_STRING_NOT_NULL");
        public final static Property SimpleDate = new Property(17, java.util.Date.class, "simpleDate", false, "SIMPLE_DATE");
        public final static Property SimpleDateNotNull = new Property(18, java.util.Date.class, "simpleDateNotNull", false, "SIMPLE_DATE_NOT_NULL");
    };


    public SimpleEntityDefaultValuesDao(DaoConfig config) {
        super(config);
    }
    
    public SimpleEntityDefaultValuesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SIMPLE_ENTITY_DEFAULT_VALUES' (" + //
                "'_id' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'SIMPLE_BOOLEAN_TRUE' INTEGER DEFAULT 1 ," + // 1: simpleBooleanTrue
                "'SIMPLE_BOOLEAN_FALSE' INTEGER NOT NULL DEFAULT 0 ," + // 2: simpleBooleanFalse
                "'SIMPLE_BYTE_MAX' INTEGER DEFAULT 127 ," + // 3: simpleByteMax
                "'SIMPLE_BYTE_MIN' INTEGER NOT NULL DEFAULT -128 ," + // 4: simpleByteMin
                "'SIMPLE_SHORT_MAX' INTEGER DEFAULT 32767 ," + // 5: simpleShortMax
                "'SIMPLE_SHORT_MIN' INTEGER NOT NULL DEFAULT -32768 ," + // 6: simpleShortMin
                "'SIMPLE_INT_MAX' INTEGER DEFAULT 2147483647 ," + // 7: simpleIntMax
                "'SIMPLE_INT_MIN' INTEGER NOT NULL DEFAULT -2147483648 ," + // 8: simpleIntMin
                "'SIMPLE_LONG_MAX' INTEGER DEFAULT 9223372036854775807 ," + // 9: simpleLongMax
                "'SIMPLE_LONG_MIN' INTEGER NOT NULL DEFAULT -9223372036854775808 ," + // 10: simpleLongMin
                "'SIMPLE_FLOAT_MAX' REAL DEFAULT 3.4028235E38 ," + // 11: simpleFloatMax
                "'SIMPLE_FLOAT_MIN' REAL NOT NULL DEFAULT 1.4E-45 ," + // 12: simpleFloatMin
                "'SIMPLE_DOUBLE_MAX' REAL DEFAULT 1.7976931348623157E308 ," + // 13: simpleDoubleMax
                "'SIMPLE_DOUBLE_MIN' REAL NOT NULL DEFAULT 4.9E-324 ," + // 14: simpleDoubleMin
                "'SIMPLE_STRING' TEXT DEFAULT 'greenrobot greenDAO' ," + // 15: simpleString
                "'SIMPLE_STRING_NOT_NULL' TEXT NOT NULL DEFAULT 'greenrobot greenDAO' ," + // 16: simpleStringNotNull
                "'SIMPLE_DATE' INTEGER DEFAULT 1381453387 ," + // 17: simpleDate
                "'SIMPLE_DATE_NOT_NULL' INTEGER NOT NULL DEFAULT 1381453387 );"); // 18: simpleDateNotNull
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SIMPLE_ENTITY_DEFAULT_VALUES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SimpleEntityDefaultValues entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Boolean simpleBooleanTrue = entity.getSimpleBooleanTrue();
        if (simpleBooleanTrue != null) {
            stmt.bindLong(2, simpleBooleanTrue ? 1l: 0l);
        }
        stmt.bindLong(3, entity.getSimpleBooleanFalse() ? 1l: 0l);
 
        Byte simpleByteMax = entity.getSimpleByteMax();
        if (simpleByteMax != null) {
            stmt.bindLong(4, simpleByteMax);
        }
        stmt.bindLong(5, entity.getSimpleByteMin());
 
        Short simpleShortMax = entity.getSimpleShortMax();
        if (simpleShortMax != null) {
            stmt.bindLong(6, simpleShortMax);
        }
        stmt.bindLong(7, entity.getSimpleShortMin());
 
        Integer simpleIntMax = entity.getSimpleIntMax();
        if (simpleIntMax != null) {
            stmt.bindLong(8, simpleIntMax);
        }
        stmt.bindLong(9, entity.getSimpleIntMin());
 
        Long simpleLongMax = entity.getSimpleLongMax();
        if (simpleLongMax != null) {
            stmt.bindLong(10, simpleLongMax);
        }
        stmt.bindLong(11, entity.getSimpleLongMin());
 
        Float simpleFloatMax = entity.getSimpleFloatMax();
        if (simpleFloatMax != null) {
            stmt.bindDouble(12, simpleFloatMax);
        }
        stmt.bindDouble(13, entity.getSimpleFloatMin());
 
        Double simpleDoubleMax = entity.getSimpleDoubleMax();
        if (simpleDoubleMax != null) {
            stmt.bindDouble(14, simpleDoubleMax);
        }
        stmt.bindDouble(15, entity.getSimpleDoubleMin());
 
        String simpleString = entity.getSimpleString();
        if (simpleString != null) {
            stmt.bindString(16, simpleString);
        }
        stmt.bindString(17, entity.getSimpleStringNotNull());
 
        java.util.Date simpleDate = entity.getSimpleDate();
        if (simpleDate != null) {
            stmt.bindLong(18, simpleDate.getTime());
        }
        stmt.bindLong(19, entity.getSimpleDateNotNull().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SimpleEntityDefaultValues readEntity(Cursor cursor, int offset) {
        SimpleEntityDefaultValues entity = new SimpleEntityDefaultValues( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // simpleBooleanTrue
            cursor.getShort(offset + 2) != 0, // simpleBooleanFalse
            cursor.isNull(offset + 3) ? null : (byte) cursor.getShort(offset + 3), // simpleByteMax
            (byte) cursor.getShort(offset + 4), // simpleByteMin
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5), // simpleShortMax
            cursor.getShort(offset + 6), // simpleShortMin
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // simpleIntMax
            cursor.getInt(offset + 8), // simpleIntMin
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // simpleLongMax
            cursor.getLong(offset + 10), // simpleLongMin
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // simpleFloatMax
            cursor.getFloat(offset + 12), // simpleFloatMin
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // simpleDoubleMax
            cursor.getDouble(offset + 14), // simpleDoubleMin
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // simpleString
            cursor.getString(offset + 16), // simpleStringNotNull
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // simpleDate
            new java.util.Date(cursor.getLong(offset + 18)) // simpleDateNotNull
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SimpleEntityDefaultValues entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSimpleBooleanTrue(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setSimpleBooleanFalse(cursor.getShort(offset + 2) != 0);
        entity.setSimpleByteMax(cursor.isNull(offset + 3) ? null : (byte) cursor.getShort(offset + 3));
        entity.setSimpleByteMin((byte) cursor.getShort(offset + 4));
        entity.setSimpleShortMax(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
        entity.setSimpleShortMin(cursor.getShort(offset + 6));
        entity.setSimpleIntMax(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSimpleIntMin(cursor.getInt(offset + 8));
        entity.setSimpleLongMax(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setSimpleLongMin(cursor.getLong(offset + 10));
        entity.setSimpleFloatMax(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setSimpleFloatMin(cursor.getFloat(offset + 12));
        entity.setSimpleDoubleMax(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setSimpleDoubleMin(cursor.getDouble(offset + 14));
        entity.setSimpleString(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSimpleStringNotNull(cursor.getString(offset + 16));
        entity.setSimpleDate(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setSimpleDateNotNull(new java.util.Date(cursor.getLong(offset + 18)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SimpleEntityDefaultValues entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SimpleEntityDefaultValues entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
