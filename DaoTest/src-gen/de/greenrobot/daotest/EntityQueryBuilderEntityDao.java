package de.greenrobot.daotest;

import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import de.greenrobot.dao.query.WhereCondition;

import de.greenrobot.daotest.EntityQueryBuilderEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_QUERY_BUILDER_ENTITY.
*/
public class EntityQueryBuilderEntityDao extends AbstractDao<EntityQueryBuilderEntity, Long> {

    public static final String TABLENAME = "ENTITY_QUERY_BUILDER_ENTITY";

    /**
     * Properties of entity EntityQueryBuilderEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
    };


    public EntityQueryBuilderEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EntityQueryBuilderEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_QUERY_BUILDER_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TEXT' TEXT);"); // 1: text
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_QUERY_BUILDER_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityQueryBuilderEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EntityQueryBuilderEntity readEntity(Cursor cursor, int offset) {
        EntityQueryBuilderEntity entity = new EntityQueryBuilderEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // text
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityQueryBuilderEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EntityQueryBuilderEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EntityQueryBuilderEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    public EntityQueryBuilderEntityQueryBuilder queryBuilder() {
      return new EntityQueryBuilderEntityQueryBuilder(this);
    }

    public static class EntityQueryBuilderEntityQueryBuilder extends QueryBuilder<EntityQueryBuilderEntity> {
        EntityQueryBuilderEntityQueryBuilder(AbstractDao<EntityQueryBuilderEntity, ?> dao) {
            super(dao);
        }
        
        public Query<EntityQueryBuilderEntity> findByPrimaryKey(Long pk) {
            this.where(Properties.Id.eq(pk));
            return this.build();
        }
        
        public Query<EntityQueryBuilderEntity> findAll() {
            return this.build();
        }
        
        public Query<EntityQueryBuilderEntity> findByExample(EntityQueryBuilderEntity example) { 
            if(example.getId() != null) {
                return findByPrimaryKey(example.getId());
            }
        	
            ArrayList<WhereCondition> conditions = new ArrayList<WhereCondition>();

            if (example.getText() != null) {
                conditions.add(Properties.Text.eq(example.getText()));
            }


           
            if (conditions.isEmpty()) {
                throw new IllegalArgumentException("No example values given. Please provide at least one value!");
            }

            WhereCondition firstCondition = conditions.get(0);
            conditions.remove(0);
            this.where(firstCondition, conditions.toArray(new WhereCondition[0]));

        	return this.build();
        }
    }
}
