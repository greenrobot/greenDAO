package de.greenrobot.daotest;

import java.util.List;
import de.greenrobot.daotest.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TREE_ENTITY.
 */
public class TreeEntity {

    private Long id;
    private Long parentId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TreeEntityDao myDao;

    private TreeEntity parent;
    private Long parent__resolvedKey;

    private List<TreeEntity> children;

    public TreeEntity() {
    }

    public TreeEntity(Long id) {
        this.id = id;
    }

    public TreeEntity(Long id, Long parentId) {
        this.id = id;
        this.parentId = parentId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTreeEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getParentId() {
        return parentId;
    }

    public void setParentId(Long parentId) {
        this.parentId = parentId;
    }

    /** To-one relationship, resolved on first access. */
    public TreeEntity getParent() {
        if (parent__resolvedKey == null || !parent__resolvedKey.equals(parentId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TreeEntityDao targetDao = daoSession.getTreeEntityDao();
            parent = targetDao.load(parentId);
            parent__resolvedKey = parentId;
        }
        return parent;
    }

    public void setParent(TreeEntity parent) {
        this.parent = parent;
        parentId = parent == null ? null : parent.getId();
        parent__resolvedKey = parentId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<TreeEntity> getChildren() {
        if (children == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TreeEntityDao targetDao = daoSession.getTreeEntityDao();
            children = targetDao._queryTreeEntity_Children(id);
        }
        return children;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildren() {
        children = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }


	public static Builder builder() {
		return new Builder();
	}
	
	public static Builder builder(TreeEntity treeEntity) {
		return new Builder(treeEntity);
	}

	public static class Builder {

    	private TreeEntity treeEntity;
    	
    	public Builder(){
    		this.treeEntity = new TreeEntity();
    	}
    	
    	public Builder(TreeEntity treeEntity){
    		this.treeEntity = treeEntity;
    	}
    	
    	public Builder id(Long id) {
    		treeEntity.setId(id);
        	return this;
    	}

    	public Builder parentId(Long parentId) {
    		treeEntity.setParentId(parentId);
        	return this;
    	}

		public TreeEntity build(){
			return treeEntity;
		}
	}

}