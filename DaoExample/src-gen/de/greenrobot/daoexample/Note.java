package de.greenrobot.daoexample;

import de.greenrobot.daoexample.annotations.ValidationAnnotation;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.lang.reflect.Field;
// KEEP INCLUDES END
/**
 * Entity mapped to table NOTE.
 */
public class Note {

    private Long id;
    /** Not-null value. */
    @ValidationAnnotation( val = 5, key = "minLength" )
    private String text;
    private String comment;
    private java.util.Date date;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END


    public Note() {
    }

    public Note(Long id) {
        this.id = id;
    }

    public Note(Long id, String text, String comment, java.util.Date date) {
        this.id = id;
        this.text = text;
        this.comment = comment;
        this.date = date;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getText() {
        return text;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setText(String text) {
        this.text = text;
    }

    @InnerAnnotation( "beautiful" )
    public String getComment() {
        return comment;
    }

    @InnerAnnotation( "beautiful" )
    public void setComment(String comment) {
        this.comment = comment;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    // KEEP METHODS - put your custom methods here

	public void validate() throws Exception {
		for(Field field : getClass().getDeclaredFields()) {
			ValidationAnnotation validationAnnotation = field.getAnnotation(ValidationAnnotation.class);
			if(validationAnnotation != null) {
				Class type = field.getType();
				if( "minLength".equals(validationAnnotation.key()) && type == String.class) {
					try {
						String value = (String) field.get(this);
						if(value.length() < validationAnnotation.val()) {
							String name = field.getName();
							throw new Exception(name + " length should be at least " + validationAnnotation.val());
						}
					} catch (IllegalAccessException e) {
						//ignore
					}
				}
			}
		}
	}

	public @interface InnerAnnotation {
		String value();
	}
    // KEEP METHODS END

}
