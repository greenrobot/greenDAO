package org.greenrobot.greendao.daotest;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.UUID;
import org.greenrobot.greendao.daotest.customtype.UuidConverter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "CUSTOM_PK_TYPE_ENTITY".
*/
public class CustomPkTypeEntityDao extends AbstractDao<CustomPkTypeEntity, UUID> {

    public static final String TABLENAME = "CUSTOM_PK_TYPE_ENTITY";

    /**
     * Properties of entity CustomPkTypeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Value = new Property(1, Integer.class, "value", false, "VALUE");
    }

    private final UuidConverter idConverter = new UuidConverter();

    public CustomPkTypeEntityDao(DaoConfig config) {
        super(config);
    }

    public CustomPkTypeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOM_PK_TYPE_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"VALUE\" INTEGER);"); // 1: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOM_PK_TYPE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CustomPkTypeEntity entity) {
        stmt.clearBindings();

        UUID id = entity.getId();
        if (id != null) {
            stmt.bindString(1, idConverter.convertToDatabaseValue(id));
        }

        Integer value = entity.getValue();
        if (value != null) {
            stmt.bindLong(2, value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CustomPkTypeEntity entity) {
        stmt.clearBindings();

        UUID id = entity.getId();
        if (id != null) {
            stmt.bindString(1, idConverter.convertToDatabaseValue(id));
        }

        Integer value = entity.getValue();
        if (value != null) {
            stmt.bindLong(2, value);
        }
    }

    @Override
    public UUID readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : idConverter.convertToEntityProperty(cursor.getString(offset + 0));
    }

    @Override
    public CustomPkTypeEntity readEntity(Cursor cursor, int offset) {
        CustomPkTypeEntity entity = new CustomPkTypeEntity( //
            cursor.isNull(offset + 0) ? null : idConverter.convertToEntityProperty(cursor.getString(offset + 0)), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // value
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, CustomPkTypeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : idConverter.convertToEntityProperty(cursor.getString(offset + 0)));
        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }

    @Override
    protected final UUID updateKeyAfterInsert(CustomPkTypeEntity entity, long rowId) {
        return entity.getId();
    }

    @Override
    public UUID getKey(CustomPkTypeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CustomPkTypeEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
